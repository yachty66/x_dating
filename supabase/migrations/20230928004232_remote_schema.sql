
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION "public"."decrement_available_referrals"() RETURNS integer
    LANGUAGE "plpgsql"
    AS $$BEGIN
  UPDATE users
  SET available_referrals = available_referrals - 1
  RETURNING available_referrals;
END;
$$;

ALTER FUNCTION "public"."decrement_available_referrals"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."communities" (
    "profile_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "user_id" "uuid",
    "name" "text",
    "description" "text",
    "resident_count" smallint,
    "website_url" "text",
    "image_url" "text",
    "pref_contact_method" "text",
    "room_price_range" smallint,
    "location" smallint
);

ALTER TABLE "public"."communities" OWNER TO "postgres";

ALTER TABLE "public"."communities" ALTER COLUMN "profile_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."communities_community_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."confirmation_codes" (
    "code" integer NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "email" "text"
);

ALTER TABLE "public"."confirmation_codes" OWNER TO "postgres";

ALTER TABLE "public"."confirmation_codes" ALTER COLUMN "code" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."confirmation_codes_code_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."follow_intersections" (
    "last_updated" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_1_id" "uuid" NOT NULL,
    "user_2_id" "uuid" NOT NULL,
    "intersection_count" smallint
);

ALTER TABLE "public"."follow_intersections" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."housing_search_profiles" (
    "profile_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "pref_housemate_details" "text",
    "pref_housing_type" smallint,
    "pref_housemate_count" smallint,
    "user_id" "uuid" NOT NULL,
    "link" "text",
    "pref_move_in" smallint,
    "pref_contact_method" "text"
);

ALTER TABLE "public"."housing_search_profiles" OWNER TO "postgres";

ALTER TABLE "public"."housing_search_profiles" ALTER COLUMN "profile_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."housing_search_profiles_profile_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."organizer_profiles" (
    "user_id" "uuid" NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "pref_house_details" "text",
    "pref_housing_type" smallint,
    "pref_lease_start" smallint,
    "pref_housemate_count" smallint,
    "link" "text",
    "pref_contact_method" "text",
    "profile_id" bigint NOT NULL
);

ALTER TABLE "public"."organizer_profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."referral_recipients" (
    "referral_id" bigint NOT NULL,
    "recipient_id" "uuid" NOT NULL
);

ALTER TABLE "public"."referral_recipients" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."referrals" (
    "referral_id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"(),
    "originator_id" "uuid" NOT NULL,
    "usage_count" integer DEFAULT 0,
    "usage_limit" integer
);

ALTER TABLE "public"."referrals" OWNER TO "postgres";

ALTER TABLE "public"."referral_recipients" ALTER COLUMN "referral_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."referrals_duplicate_referral_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE "public"."referrals" ALTER COLUMN "referral_id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."referrals_referral_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."users" (
    "created_at" timestamp with time zone DEFAULT "now"(),
    "name" "text",
    "email" "text",
    "website_url" "text",
    "phone_number" "text",
    "community_id" integer,
    "twitter_id" "text",
    "available_referrals" smallint DEFAULT '5'::smallint,
    "user_id" "uuid" NOT NULL,
    "twitter_avatar_url" "text",
    "follows_last_refresh" timestamp with time zone,
    "twitter_handle" "text",
    "contact_email" "text",
    "is_super" boolean DEFAULT false NOT NULL
);

ALTER TABLE "public"."users" OWNER TO "postgres";

ALTER TABLE ONLY "public"."communities"
    ADD CONSTRAINT "communities_community_id_key" UNIQUE ("profile_id");

ALTER TABLE ONLY "public"."communities"
    ADD CONSTRAINT "communities_pkey" PRIMARY KEY ("profile_id");

ALTER TABLE ONLY "public"."confirmation_codes"
    ADD CONSTRAINT "confirmation_codes_pkey" PRIMARY KEY ("code");

ALTER TABLE ONLY "public"."follow_intersections"
    ADD CONSTRAINT "follow_intersections_pkey" PRIMARY KEY ("user_1_id", "user_2_id");

ALTER TABLE ONLY "public"."housing_search_profiles"
    ADD CONSTRAINT "housing_search_profiles_pkey" PRIMARY KEY ("user_id");

ALTER TABLE ONLY "public"."housing_search_profiles"
    ADD CONSTRAINT "housing_search_profiles_user_id_key" UNIQUE ("profile_id");

ALTER TABLE ONLY "public"."organizer_profiles"
    ADD CONSTRAINT "organizer_profiles_pkey" PRIMARY KEY ("profile_id");

ALTER TABLE ONLY "public"."organizer_profiles"
    ADD CONSTRAINT "organizer_profiles_profile_id_key" UNIQUE ("profile_id");

ALTER TABLE ONLY "public"."referral_recipients"
    ADD CONSTRAINT "referral_recipients_pkey" PRIMARY KEY ("recipient_id");

ALTER TABLE ONLY "public"."referrals"
    ADD CONSTRAINT "referrals_pkey" PRIMARY KEY ("referral_id");

ALTER TABLE ONLY "public"."referrals"
    ADD CONSTRAINT "referrals_referral_id_key" UNIQUE ("referral_id");

ALTER TABLE ONLY "public"."users"
    ADD CONSTRAINT "users_pkey" PRIMARY KEY ("user_id");

ALTER TABLE ONLY "public"."communities"
    ADD CONSTRAINT "communities_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("user_id");

ALTER TABLE ONLY "public"."follow_intersections"
    ADD CONSTRAINT "follow_intersections_user_1_id_fkey" FOREIGN KEY ("user_1_id") REFERENCES "public"."users"("user_id");

ALTER TABLE ONLY "public"."follow_intersections"
    ADD CONSTRAINT "follow_intersections_user_2_id_fkey" FOREIGN KEY ("user_2_id") REFERENCES "public"."users"("user_id");

ALTER TABLE ONLY "public"."housing_search_profiles"
    ADD CONSTRAINT "housing_search_profiles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("user_id");

ALTER TABLE ONLY "public"."organizer_profiles"
    ADD CONSTRAINT "organizer_profiles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."users"("user_id");

ALTER TABLE ONLY "public"."referral_recipients"
    ADD CONSTRAINT "referral_recipients_referral_id_fkey" FOREIGN KEY ("referral_id") REFERENCES "public"."referrals"("referral_id");

ALTER TABLE ONLY "public"."referrals"
    ADD CONSTRAINT "referrals_originator_id_fkey" FOREIGN KEY ("originator_id") REFERENCES "public"."users"("user_id");

CREATE POLICY "Allow delete if 'user_id' matches authenticated user's ID" ON "public"."housing_search_profiles" FOR DELETE TO "authenticated" USING (("user_id" = "auth"."uid"()));

CREATE POLICY "Allow delete if 'user_id' matches authenticated user's ID" ON "public"."organizer_profiles" FOR DELETE TO "authenticated" USING (("user_id" = "auth"."uid"()));

CREATE POLICY "Allow delete if 'user_id' matches authenticated user's ID" ON "public"."users" FOR DELETE TO "authenticated" USING (("user_id" = "auth"."uid"()));

CREATE POLICY "Allow insert if user in 'public.users' & ID matches row" ON "public"."follow_intersections" FOR INSERT TO "authenticated" WITH CHECK (((EXISTS ( SELECT 1
   FROM "public"."users"
  WHERE ("users"."user_id" = "auth"."uid"()))) AND ("auth"."uid"() = "user_1_id")));

CREATE POLICY "Allow insert if user in 'public.users' & where ID matches row" ON "public"."housing_search_profiles" FOR INSERT TO "authenticated" WITH CHECK (((EXISTS ( SELECT 1
   FROM "public"."users"
  WHERE ("users"."user_id" = "auth"."uid"()))) AND ("user_id" = "auth"."uid"())));

CREATE POLICY "Allow insert if user in 'public.users' & where ID matches row" ON "public"."organizer_profiles" FOR INSERT TO "authenticated" WITH CHECK (((EXISTS ( SELECT 1
   FROM "public"."users"
  WHERE ("users"."user_id" = "auth"."uid"()))) AND ("user_id" = "auth"."uid"())));

CREATE POLICY "Allow insert if user in 'public.users' and originator_id match" ON "public"."referrals" FOR INSERT TO "authenticated" WITH CHECK (((EXISTS ( SELECT 1
   FROM "public"."users"
  WHERE ("users"."user_id" = "auth"."uid"()))) AND ("originator_id" = "auth"."uid"())));

CREATE POLICY "Allow select for anon and authenticated" ON "public"."users" FOR SELECT TO "anon", "authenticated" USING (true);

CREATE POLICY "Allow select for users in 'public.users'" ON "public"."follow_intersections" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."users"
  WHERE ("users"."user_id" = "auth"."uid"()))));

CREATE POLICY "Allow select for users in 'public.users'" ON "public"."housing_search_profiles" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."users"
  WHERE ("users"."user_id" = "auth"."uid"()))));

CREATE POLICY "Allow select for users in 'public.users'" ON "public"."organizer_profiles" FOR SELECT TO "authenticated" USING ((EXISTS ( SELECT 1
   FROM "public"."users"
  WHERE ("users"."user_id" = "auth"."uid"()))));

CREATE POLICY "Allow update if 'user_id' matches authenticated user's ID" ON "public"."users" FOR UPDATE TO "authenticated" USING (("user_id" = "auth"."uid"())) WITH CHECK (("user_id" = "auth"."uid"()));

CREATE POLICY "Allow update if user in 'public.users' & where ID matches row" ON "public"."follow_intersections" FOR UPDATE TO "authenticated" USING (((EXISTS ( SELECT 1
   FROM "public"."users"
  WHERE ("users"."user_id" = "auth"."uid"()))) AND ("auth"."uid"() = "user_1_id"))) WITH CHECK (("auth"."uid"() = "user_1_id"));

CREATE POLICY "Allow update if user in 'public.users' & where ID matches row" ON "public"."housing_search_profiles" FOR UPDATE TO "authenticated" USING (((EXISTS ( SELECT 1
   FROM "public"."users"
  WHERE ("users"."user_id" = "auth"."uid"()))) AND ("user_id" = "auth"."uid"()))) WITH CHECK (("user_id" = "auth"."uid"()));

CREATE POLICY "Allow update if user in 'public.users' & where ID matches row" ON "public"."organizer_profiles" FOR UPDATE TO "authenticated" USING (((EXISTS ( SELECT 1
   FROM "public"."users"
  WHERE ("users"."user_id" = "auth"."uid"()))) AND ("user_id" = "auth"."uid"()))) WITH CHECK (("user_id" = "auth"."uid"()));

CREATE POLICY "Allow user deletion where user is user1 or user2" ON "public"."follow_intersections" FOR DELETE TO "authenticated" USING ((("auth"."uid"() = "user_1_id") OR ("auth"."uid"() = "user_2_id")));

ALTER TABLE "public"."follow_intersections" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."organizer_profiles" ENABLE ROW LEVEL SECURITY;

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."decrement_available_referrals"() TO "anon";
GRANT ALL ON FUNCTION "public"."decrement_available_referrals"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."decrement_available_referrals"() TO "service_role";

GRANT ALL ON TABLE "public"."communities" TO "anon";
GRANT ALL ON TABLE "public"."communities" TO "authenticated";
GRANT ALL ON TABLE "public"."communities" TO "service_role";

GRANT ALL ON SEQUENCE "public"."communities_community_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."communities_community_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."communities_community_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."confirmation_codes" TO "anon";
GRANT ALL ON TABLE "public"."confirmation_codes" TO "authenticated";
GRANT ALL ON TABLE "public"."confirmation_codes" TO "service_role";

GRANT ALL ON SEQUENCE "public"."confirmation_codes_code_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."confirmation_codes_code_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."confirmation_codes_code_seq" TO "service_role";

GRANT ALL ON TABLE "public"."follow_intersections" TO "anon";
GRANT ALL ON TABLE "public"."follow_intersections" TO "authenticated";
GRANT ALL ON TABLE "public"."follow_intersections" TO "service_role";

GRANT ALL ON TABLE "public"."housing_search_profiles" TO "anon";
GRANT ALL ON TABLE "public"."housing_search_profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."housing_search_profiles" TO "service_role";

GRANT ALL ON SEQUENCE "public"."housing_search_profiles_profile_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."housing_search_profiles_profile_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."housing_search_profiles_profile_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."organizer_profiles" TO "anon";
GRANT ALL ON TABLE "public"."organizer_profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."organizer_profiles" TO "service_role";

GRANT ALL ON TABLE "public"."referral_recipients" TO "anon";
GRANT ALL ON TABLE "public"."referral_recipients" TO "authenticated";
GRANT ALL ON TABLE "public"."referral_recipients" TO "service_role";

GRANT ALL ON TABLE "public"."referrals" TO "anon";
GRANT ALL ON TABLE "public"."referrals" TO "authenticated";
GRANT ALL ON TABLE "public"."referrals" TO "service_role";

GRANT ALL ON SEQUENCE "public"."referrals_duplicate_referral_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."referrals_duplicate_referral_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."referrals_duplicate_referral_id_seq" TO "service_role";

GRANT ALL ON SEQUENCE "public"."referrals_referral_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."referrals_referral_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."referrals_referral_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."users" TO "anon";
GRANT ALL ON TABLE "public"."users" TO "authenticated";
GRANT ALL ON TABLE "public"."users" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
